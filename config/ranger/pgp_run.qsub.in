#!/bin/bash

### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##
#
#   Copyright J. Craig Venter Institute 2012
#   See docs.PGP/COPYING file distributed along with the proteogenomics 
#   package for the copyright and license terms.
#
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ##

#SGE options
#$ -A #Charges run to <project_account_name>. Used only for multi-project logins.
#$ -V # Inherit the submission environment
#$ -cwd # Start job in submission directory
#$ -N pgp_makeflow # Job Name
#$ -j y # Combine stderr and stdout
#$ -o $JOB_NAME.o$JOB_ID # Name of the output file (eg. myMPI.oJobID)
#$ -pe 16way 64 # Requests 16 tasks/node, 64 cores total
#$ -q normal # Queue name "normal"
#$ -l h_rt=12:00:00 # Run time (hh:mm:ss)
##$ -M # Use email notification address
##$ -m be # Email at Begin and End of job

#MPI backend for makeflow works this way: makeflow
#itself can be started anywhere; it will listen for
#worker connections on a given TCP port.
#The MPI worker application will be started separately
#on N cores (ranks). Only rank 0 worker process (the
#master worker) will be communicating with the
#makeflow process through TCP socket, getting tasks from 
#it and distributing them to other worker ranks (slave workers)
#through MPI messaging API. In principle, multiple
#MPI worker runs can be servicing a single makeflow
#process at the same time.
#The MPI process will exit if no work is available for
#WORKER_MAX_IDLE_TIME seconds.

#This port has to be free for the makeflow to bind to it
#and accept connections from the master worker.
#Ranger allocates an entire node to one user, so the
#port should be free. Note that if it is not free,
#makeflow will pick some other port and print it,
#and also set environment variable WORK_QUEUE_PORT.
#You would have to modify this script to use that
#information if you wish.
#The variable with that name is also read by the makeflow
#to try and bind to the port specified. Makeflow ignores
#the -p parameter when using MPI backend.
export MPI_QUEUE_PORT=10000

#MPI worker application exits after this much idle time.
#Note that if you have a long barrier task marked as LOCAL
#in your makefile, you can reach this limit even if the
#workflow is not finished.
WORKER_MAX_IDLE_TIME=600

#Master worker (mpi rank 0) can end up on a node
#different from the node where this script is executed.
#This has been observed on Ranger.
#We need to use the external hostname instead of 
#localhost when we start the worker MPI run. This works
#at this time (2012-06-21) on Ranger.
#This also means that the TCP socket connections should
#be allowed between compute nodes. If this gets blocked,
#you can either try running the makeflow executable 
#on the submit node and only submit mpi workers to batch queue, 
#or manipulate the ibrun/mpirun parameters which map ranks to 
#nodes to guarantee that rank 0 is on the script execution
#host, in which case you will be able to use the loopback interface 
#(localhost) instead of the hostname.

makeflow_host=$(hostname)

cctools_bin=@CCTOOLS_INSTALL_DIR@/bin

ibrun $cctools_bin/mpi_queue_worker -t $WORKER_MAX_IDLE_TIME $makeflow_host $MPI_QUEUE_PORT &
$cctools_bin/makeflow -T mpi-queue -J 40000 pgp_proc.mkf
wait

